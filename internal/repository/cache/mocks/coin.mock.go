// Code generated by MockGen. DO NOT EDIT.
// Source: ./coin.go
//
// Generated by this command:
//
//	mockgen -source=./coin.go -package=cachemocks -destination=./mocks/coin.mock.go CoinCache
//

// Package cachemocks is a generated GoMock package.
package cachemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/miles0wu/meme-coin-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCoinCache is a mock of CoinCache interface.
type MockCoinCache struct {
	ctrl     *gomock.Controller
	recorder *MockCoinCacheMockRecorder
	isgomock struct{}
}

// MockCoinCacheMockRecorder is the mock recorder for MockCoinCache.
type MockCoinCacheMockRecorder struct {
	mock *MockCoinCache
}

// NewMockCoinCache creates a new mock instance.
func NewMockCoinCache(ctrl *gomock.Controller) *MockCoinCache {
	mock := &MockCoinCache{ctrl: ctrl}
	mock.recorder = &MockCoinCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinCache) EXPECT() *MockCoinCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCoinCache) Get(ctx context.Context, id int64) (domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCoinCacheMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCoinCache)(nil).Get), ctx, id)
}

// IncrPopularityScoreIfPresent mocks base method.
func (m *MockCoinCache) IncrPopularityScoreIfPresent(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrPopularityScoreIfPresent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrPopularityScoreIfPresent indicates an expected call of IncrPopularityScoreIfPresent.
func (mr *MockCoinCacheMockRecorder) IncrPopularityScoreIfPresent(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrPopularityScoreIfPresent", reflect.TypeOf((*MockCoinCache)(nil).IncrPopularityScoreIfPresent), ctx, id)
}

// Set mocks base method.
func (m *MockCoinCache) Set(ctx context.Context, c domain.Coin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCoinCacheMockRecorder) Set(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCoinCache)(nil).Set), ctx, c)
}
