// Code generated by MockGen. DO NOT EDIT.
// Source: ./coin.go
//
// Generated by this command:
//
//	mockgen -source=./coin.go -package=daomocks -destination=./mocks/coin.mock.go CoinDAO
//

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	reflect "reflect"

	dao "github.com/miles0wu/meme-coin-api/internal/repository/dao"
	gomock "go.uber.org/mock/gomock"
)

// MockCoinDAO is a mock of CoinDAO interface.
type MockCoinDAO struct {
	ctrl     *gomock.Controller
	recorder *MockCoinDAOMockRecorder
	isgomock struct{}
}

// MockCoinDAOMockRecorder is the mock recorder for MockCoinDAO.
type MockCoinDAOMockRecorder struct {
	mock *MockCoinDAO
}

// NewMockCoinDAO creates a new mock instance.
func NewMockCoinDAO(ctrl *gomock.Controller) *MockCoinDAO {
	mock := &MockCoinDAO{ctrl: ctrl}
	mock.recorder = &MockCoinDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinDAO) EXPECT() *MockCoinDAOMockRecorder {
	return m.recorder
}

// DeleteById mocks base method.
func (m *MockCoinDAO) DeleteById(ctx context.Context, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockCoinDAOMockRecorder) DeleteById(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockCoinDAO)(nil).DeleteById), ctx, uid)
}

// FindById mocks base method.
func (m *MockCoinDAO) FindById(ctx context.Context, uid int64) (dao.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, uid)
	ret0, _ := ret[0].(dao.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCoinDAOMockRecorder) FindById(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCoinDAO)(nil).FindById), ctx, uid)
}

// IncrPopularityScore mocks base method.
func (m *MockCoinDAO) IncrPopularityScore(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrPopularityScore", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrPopularityScore indicates an expected call of IncrPopularityScore.
func (mr *MockCoinDAOMockRecorder) IncrPopularityScore(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrPopularityScore", reflect.TypeOf((*MockCoinDAO)(nil).IncrPopularityScore), ctx, id)
}

// Insert mocks base method.
func (m *MockCoinDAO) Insert(ctx context.Context, c dao.Coin) (dao.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, c)
	ret0, _ := ret[0].(dao.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockCoinDAOMockRecorder) Insert(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCoinDAO)(nil).Insert), ctx, c)
}

// UpdateById mocks base method.
func (m *MockCoinDAO) UpdateById(ctx context.Context, entity dao.Coin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockCoinDAOMockRecorder) UpdateById(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockCoinDAO)(nil).UpdateById), ctx, entity)
}
