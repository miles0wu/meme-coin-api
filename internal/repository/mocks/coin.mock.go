// Code generated by MockGen. DO NOT EDIT.
// Source: ./coin.go
//
// Generated by this command:
//
//	mockgen -source=./coin.go -package=repomocks -destination=./mocks/coin.mock.go CoinRepository
//

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/miles0wu/meme-coin-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCoinRepository is a mock of CoinRepository interface.
type MockCoinRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCoinRepositoryMockRecorder
	isgomock struct{}
}

// MockCoinRepositoryMockRecorder is the mock recorder for MockCoinRepository.
type MockCoinRepositoryMockRecorder struct {
	mock *MockCoinRepository
}

// NewMockCoinRepository creates a new mock instance.
func NewMockCoinRepository(ctrl *gomock.Controller) *MockCoinRepository {
	mock := &MockCoinRepository{ctrl: ctrl}
	mock.recorder = &MockCoinRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinRepository) EXPECT() *MockCoinRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCoinRepository) Create(ctx context.Context, coin domain.Coin) (domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, coin)
	ret0, _ := ret[0].(domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCoinRepositoryMockRecorder) Create(ctx, coin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCoinRepository)(nil).Create), ctx, coin)
}

// DeleteById mocks base method.
func (m *MockCoinRepository) DeleteById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockCoinRepositoryMockRecorder) DeleteById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockCoinRepository)(nil).DeleteById), ctx, id)
}

// FindById mocks base method.
func (m *MockCoinRepository) FindById(ctx context.Context, id int64) (domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCoinRepositoryMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCoinRepository)(nil).FindById), ctx, id)
}

// IncrPopularityScore mocks base method.
func (m *MockCoinRepository) IncrPopularityScore(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrPopularityScore", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrPopularityScore indicates an expected call of IncrPopularityScore.
func (mr *MockCoinRepositoryMockRecorder) IncrPopularityScore(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrPopularityScore", reflect.TypeOf((*MockCoinRepository)(nil).IncrPopularityScore), ctx, id)
}

// Update mocks base method.
func (m *MockCoinRepository) Update(ctx context.Context, coin domain.Coin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, coin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCoinRepositoryMockRecorder) Update(ctx, coin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCoinRepository)(nil).Update), ctx, coin)
}
