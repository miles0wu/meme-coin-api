// Code generated by MockGen. DO NOT EDIT.
// Source: ./coin.go
//
// Generated by this command:
//
//	mockgen -source=./coin.go -package=svcmocks -destination=./mocks/coin.mock.go CoinService
//

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/miles0wu/meme-coin-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCoinService is a mock of CoinService interface.
type MockCoinService struct {
	ctrl     *gomock.Controller
	recorder *MockCoinServiceMockRecorder
	isgomock struct{}
}

// MockCoinServiceMockRecorder is the mock recorder for MockCoinService.
type MockCoinServiceMockRecorder struct {
	mock *MockCoinService
}

// NewMockCoinService creates a new mock instance.
func NewMockCoinService(ctrl *gomock.Controller) *MockCoinService {
	mock := &MockCoinService{ctrl: ctrl}
	mock.recorder = &MockCoinServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinService) EXPECT() *MockCoinServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCoinService) Create(ctx context.Context, coin domain.Coin) (domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, coin)
	ret0, _ := ret[0].(domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCoinServiceMockRecorder) Create(ctx, coin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCoinService)(nil).Create), ctx, coin)
}

// DeleteById mocks base method.
func (m *MockCoinService) DeleteById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockCoinServiceMockRecorder) DeleteById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockCoinService)(nil).DeleteById), ctx, id)
}

// GetById mocks base method.
func (m *MockCoinService) GetById(ctx context.Context, id int64) (domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCoinServiceMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCoinService)(nil).GetById), ctx, id)
}

// IncrPopularityScore mocks base method.
func (m *MockCoinService) IncrPopularityScore(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrPopularityScore", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrPopularityScore indicates an expected call of IncrPopularityScore.
func (mr *MockCoinServiceMockRecorder) IncrPopularityScore(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrPopularityScore", reflect.TypeOf((*MockCoinService)(nil).IncrPopularityScore), ctx, id)
}

// Update mocks base method.
func (m *MockCoinService) Update(ctx context.Context, coin domain.Coin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, coin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCoinServiceMockRecorder) Update(ctx, coin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCoinService)(nil).Update), ctx, coin)
}
